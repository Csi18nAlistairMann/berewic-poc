<?php
/*
  This endpoint will initially live at http://berewic.pectw.net

  The output will reflect the presence or absence in the inbound
  connections headers of berewic information.

  This endpoint ultimately grows into /Bob's server/: he hosts content here
  which he wishes to have protected using berewic bonds.
 */
//
// globals
error_reporting(E_ALL);

define('CONST_HEADER_KEY_MARKER', 'berewic-');
define('CONST_HEADER_KEY_MAX_SZ', 32);
define('CONST_HEADER_VALUE_MAX_SZ', 255);
define('CONST_HEADER_TXT_VERSION', CONST_HEADER_KEY_MARKER . 'version');
define('CONST_HEADER_TXT_ROLE', CONST_HEADER_KEY_MARKER . 'role');
define('CONST_NO_VERSION', '0.0');
define('CONST_ROLE_TXT_CLIENT', 'client');
define('CONST_ROLE_TXT_SERVER', 'server');

define('ERR_HEADER_KEY_TOO_LARGE', 1000);
define('ERR_HEADER_KEY_TOO_LARGE_MSG',
	   'Headers have a key equal or longer than ' . CONST_HEADER_KEY_MAX_SZ .
	   ' characters');
define('ERR_HEADER_VALUE_TOO_LARGE', 1001);
define('ERR_HEADER_VALUE_TOO_LARGE_MSG',
	   'Headers have a value equal or longer than ' . CONST_HEADER_VALUE_MAX_SZ .
	   ' characters');
define('ERR_HEADER_ROLE_NOT_RECOGNISED', 1002);
define('ERR_HEADER_ROLE_NOT_RECOGNISED_MSG', 'Role not "' . CONST_ROLE_TXT_CLIENT .
	   '" or "' . CONST_ROLE_TXT_SERVER . '"');
define('ERR_HEADER_KEY_UNKNOWN', 1003);
define('ERR_HEADER_KEY_UNKNOWN_MSG', 'Headers have a key unknown to this system');

//
// classes

class requestHeaders {
	private $headers_passed = array();
	private $headers_seen = 0;
	private $isClient = false;
	private $isServer = false;
	private $version = CONST_NO_VERSION;
	private $shenanigans_arr = array();

	function __construct($headers) {
		// Takes in an array of k=>v pairs as generated by
		// apache_request_headers(), size checks them, and
		// store those that pass.
		foreach ($headers as $header => $value) {
			if (strtolower(substr($header, 0, 8)) === CONST_HEADER_KEY_MARKER) {
				// sanity check for sizes
				$key = strtolower(substr($header, 0, CONST_HEADER_KEY_MAX_SZ));
				if (strlen($key) === CONST_HEADER_KEY_MAX_SZ)
					$this->addShenanigan(ERR_HEADER_KEY_TOO_LARGE);
				$value = substr($value, 0, CONST_HEADER_VALUE_MAX_SZ);
				if (strlen($value) === CONST_HEADER_VALUE_MAX_SZ)
					$this->addShenanigan(ERR_HEADER_VALUE_TOO_LARGE);
				// make a copy
				$this->headers_passed[] = [$key => $value];
				$this->incHeadersSeen();
				//
				if ($key === CONST_HEADER_TXT_VERSION)
					$this->setVersion($value);
				elseif ($key === CONST_HEADER_TXT_ROLE)
					$this->setRole($value);
				else
					$this->addShenanigan(ERR_HEADER_KEY_UNKNOWN);
			}
		}
	}

	function incHeadersSeen() {
		$this->headers_seen++;
	}

	function getHeadersSeen() {
		return $this->headers_seen;
	}

	function getHeadersPassed() {
		return $this->headers_passed;
	}

	function getShenanigans() {
		if (sizeof($this->shenanigans_arr) === 0)
			return false;
		else
			return true;
	}

	function addShenanigan($error) {
		$this->shenanigans_arr[] = $error;
	}

	function printShenanigans() {
		foreach ($this->shenanigans_arr as $value) {
			switch ($value) {
			case ERR_HEADER_KEY_TOO_LARGE:
				echo ERR_HEADER_KEY_TOO_LARGE_MSG . "\n";
				break;
			case ERR_HEADER_VALUE_TOO_LARGE:
				echo ERR_HEADER_VALUE_TOO_LARGE_MSG . "\n";
				break;
			case ERR_HEADER_ROLE_NOT_RECOGNISED:
				echo ERR_HEADER_ROLE_NOT_RECOGNISED_MSG . "\n";
				break;
			case ERR_HEADER_KEY_UNKNOWN:
				echo ERR_HEADER_KEY_UNKNOWN_MSG . "\n";
				break;
			}
		}
	}

	function setRole($value) {
		$value = strtolower($value);
		if ($value === CONST_ROLE_TXT_SERVER) {
			$this->isClient = false;
			$this->isServer = true;
		} elseif ($value === CONST_ROLE_TXT_CLIENT) {
			$this->isClient = true;
			$this->isServer = false;
		} else {
			$this->isClient = false;
			$this->isServer = false;
			$this->addShenanigan(ERR_ROLE_NOT_RECOGNISED);
		}
	}

	function setVersion($value) {
		$this->version = $value;
	}

	function getVersion() {
		return $this->version;
	}
}

//
// Subroutines

function main($headers) {
	echo "Hello, world!\n";

	$rHeaders = new requestHeaders($headers);
	if ($rHeaders->getShenanigans() === true) {
		echo "Bonding headers seen but shenanigans detected:\n";
		$rHeaders->printShenanigans();

	} elseif ($rHeaders->getHeadersSeen() === 0) {
		echo "No bonding headers seen, please bond at XYZ\n";

	} else {
		echo "Congratulations! This connection is bonded\n";
	}
}

//
// entry point

main(apache_request_headers());
?>
